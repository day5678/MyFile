快乐沃克项目分析:

整体:
开始是MVC框架，后来由于太乱，搭建了MVP框架慢慢进行替换。

点滴:
任务:
目标管理:
新人破冰:
个人中心:
瞬间:



IM模块:

功能模块划分：
联系人、群组、Session(最近聊天)、消息、通知、网络（包含心跳、消息推送、长连接）、登陆

消息类型:
文本、AT文本、语音、文件、图片、红包、任务、未知

语音:
采用speex，Speex（读音[spi:ks]）是一套开源免费的、无专利保护的、针对语音设计的音频压缩格式，非常适用于互联网应用程序。
录音方式是用Android自带的AudioRecord，在录音过程中，直接使用SpeexEncoder来转换保存，后缀为".spx"
播放的时候直接用speexdec.decode()进行播放，AudioRecord设置播放模式(听筒，扬声器)


网络:
netty:使用TCP协议


加入的功能:
AT功能、表情、红包、任务功能(消息和群组)

修改功能:
把图片和音频上传到阿里云上



网络协议分析:
1、XMPP协议：
优点：基于xml协议，容易理解，使用广泛，易于扩展。
缺点：流量大，在移动终端也耗电。交互过程复杂。多被pc时代的产品使用，不适合移动时代的IM产品，即使我们基于xmpp进行改进，简化握手过程，改进文件传输机制，但是它的基因决定了如何改进，
他都不适合移动互联网时代的IM产品。
2、MQTT协议：
优点：适配多平台。
缺点：协议简单，但是需要自己扩展好友，群组等功能。
3、私有协议：
优点：随心所欲，自己定义，流量小。
缺点：工作量巨大，扩展性差，需要考虑全面。
4、Protobuf协议：
优点：非常小、非常快、非常简单，一条消息数据用Protobuf序列化后的大小是JSON的1/10、XML格式的1/20、是二进制序列化的1/10。
缺点：不能表示复杂的数据结构，但是对于IM来讲，已经足够。


基于protobuf协议，Protobuf优势:
1.需要和其它系统做消息交换的，对消息大小很敏感的。那么protobuf适合了，它语言无关，消息空间相对xml和json等节省很多。
2.小数据的场合。如果你是大数据，用它并不适合。
3.项目语言是c++,java,python的，因为它们可以使用google的源生类库，序列化和反序列化的效率非常高。其它的语言需要第三方或者自己写，序列化和反序列化的效率不保证。
总体而言，protobuf还是非常好用的，被很多开源系统用于数据通信的工具，在google也是核心的基础库




心跳机制:
防止NAT超时
TCP的KeepAlive只能保证两端的连接还存在，如果服务器端卡死，那么检测不出来，心跳可以检测出来，因为需要回执
http://www.52im.net/thread-281-1-1.html






动画！！！


View绘制(例如仪表盘)

怎么帮忙解决的通讯录的问题

语音怎么实现的？？？？？？